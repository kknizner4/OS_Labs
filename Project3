/**
 * COSC 3250 - Project #3
 * Explain briefly the functionality of the program.
 * @author Max Marquez and Katie Knizner
 * Instructor Dr. Brylow
 * TA-BOT:MAILTO [your email address]
 */
#include <xinu.h>
#include "ns16550.h"

#define UNGETMAX 10             /* Can un-get at most 10 characters. */
static unsigned char ungetArray[UNGETMAX];
unsigned int  bufp;

syscall kgetc()
{
    /* Pointer to the UART control and status registers.  */
    volatile struct ns16550_uart_csreg *regptr;
    regptr = (struct ns16550_uart_csreg *)UART_BASE;

    // TODO: First, check the unget buffer for a character.
    if (bufp > 0) {
        return ungetArray[--bufp];
    }
    //       Otherwise, check UART line status register, and

    //       once there is data ready, get character c.

    return SYSERR;
}

/**
 * kcheckc - check to see if a character is available.
 * @return true if a character is available, false otherwise.
*/
syscall kcheckc(void)
{
    volatile struct ns16550_uart_csreg *regptr;
    regptr = (struct ns16550_uart_csreg *)UART_BASE;

    // TODO: Check the unget buffer and the UART for characters.
     if (bufp > 0) {
        return TRUE;  // Character available in the unget buffer
    }
        return SYSERR;
}

/**
 * kungetc - put a serial character "back" into a local buffer.
 * @param c character to unget.
 * @return c on success, SYSERR on failure.
 */
syscall kungetc(unsigned char c)
{
    // TODO: Check for room in unget buffer, put the character in or discard.
     if (bufp < UNGETMAX) {
        // Put the character into the unget buffer
        ungetArray[bufp++] = c;
        return c;
    }
    return SYSERR;
}

syscall kputc(uchar c)
{
    volatile struct ns16550_uart_csreg *regptr;
    regptr = (struct ns16550_uart_csreg *)UART_BASE;

    // TODO: Check UART line status register.

    // Check UART flags register for Transmitter FIFO full

    while (regptr->fr & ns16550_FR_TXFF)
    ;
    if (c != '\n')
    {
        // Send the character to the data register.
        regptr->dr = c;
    }
    else
    {
        // Send carriage return to the data register, wait, then send the new line.
        regptr->dr = '\r';
        while (regptr->fr & ns16550_FR_TXFF)
        ;
        regptr->dr = '\n';
    }

    return c;
}

syscall kprintf(const char *format, ...)
{
    int retval;
    va_list ap;

    va_start(ap, format);
    retval = _doprnt(format, ap, (int (*)(long, long))kputc, 0);
    va_end(ap);
    return retval;
}
     
